标题：本章共5节
一、
@集合可以存放多个不同  类型  的对象
@ int 类型在存放在  集合中  会自动转换为  Integer

泛型
来源于  JDK1.5   Generic Programming
含义：编写的代码可以被很多不同类型的对象所重用   （广泛使用）

java中的泛型分为三种
例如
泛型类：  ArrayList HashSet HashMap
泛型方法  Collections.binartSearch  Arrays.sort    具体到某一个方法可以被很多类所使用
泛型接口： List    Iterator

本质：
     参数化类型  把类型当作参数传进 ：  泛型类 泛型方法 泛型接口、
     避免类型转换  代码可以复用

其它语言的同类：
    C++的模板（template）
    C#的泛型

二、
泛型类  具有泛型变量的类
在类名后用  <T> 代表引入类型  如果你要引入 多个类型  可以使用多个字母即可   例如   HashMap的  <K,V>  或者自定义一个  <T,U>
   困惑的一件事情的解答  例如 T E K V 这些字母  其实都是表示泛型的字母
   只有意义上的差别，而没有实际上的差别，
   T：template 模板  E：element 元素  K：key 键 V：value 值

   这句话很重要：
                   引入类型可以修饰 成员变量   参数  返回值     局部变量            // 局部变量 看到了效果，但是感觉效果很脑瘫

java没有专用的泛型关键字  例如  C  中使用的是  template

泛型方法:具有泛型参数的方法   该方法可在  普通类/泛型类中

扩展 ：
 自定义泛型接口的 T 本身也是一个泛型类
 使用 List嵌套 HashMap 也是这样的操作

 总结：
 泛型类： 整个类都被泛化，包括变量和方法
 泛型方法： 方法被泛化，包括返回值和参数
 泛型接口：泛化子类方法

 三、泛型类型限定
 泛型--编写的代码可以被很多不同类型的对象所重用
 特定场景下，需要对类型进行限定（使用某些特定方法）
 通过 extends 限定    例如<T extends Comparable>

 无论 接口 还是 类 都是通过 extends 限定

例如 <T extends FileNameFilter>

也可以同时限制  一个 类  加上多个接口    和java的继承规则类似（继承：只能一个类可以实现多个接口）
例如  <T extends Comparable&FileNameFilter>    表示  传入的类型必须同时是 extends后面的 类和接口的子类
规则是  类必须放在第一位，然后使用  & 符号 拼接 接口

逗号 隔 参数
GP3<T extends File &Cloneable,U extends Serializable>

泛型继承原则

泛型类之间的 继承

Pair<S> 和 Pair<T> 没有任何关系，无论 S和 T之间是什么关系   同样一个类型，中间指定的泛型不一样，他们两个之间是没有任何关系的
例如 S 是 T的 父类
Pair<T> t = new Pair(T,T);
Pair<S> pair = t;这句话编译器会直接报错

但是 泛型类的主类
例如 : List<String> 与 ArrayList<String> 二者之间的  List 和 ArrayList 他们存在继承关系 然后所使用的泛型 是相同的  String
他们可以进行 对象的  = 赋值   他们之间是  List 和 ArrayList  的转型

上限定通配符：
Pair<? extends S>
pair能够接受的参数类型，是 S 自身或者子类

只能get 不能 set  ，编译器能够保证出来的类型一定能够转型到 S 类型，但是不保证放入的对象是什么类型,所以进行放入操作，编译器就会不支持

泛型类 因为  无法进行直接的转换，功能比较弱一点，所以java提供一个通配符的概念 ， 可以使得泛型对象之间存在着继承关系
？ extends S   接收  S 本身 或者子类

类型擦除：












